{"version":3,"sources":["components/navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","id","role","data-toggle","aria-haspopup","aria-expanded","src","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+NA8CeA,MAzCf,WAEI,OAED,gCACF,yBAAKC,UAAU,mDAGf,wBAAIA,UAAU,sBACP,wBAAIA,UAAU,qBACZ,uBAAGA,UAAU,2BAA2BC,KAAK,eAAeC,GAAG,iBAAiBC,KAAK,SAASC,cAAY,WAAWC,gBAAc,OAAOC,gBAAc,SAAxJ,YAKF,wBAAIN,UAAU,YACZ,uBAAGA,UAAU,WAAWC,KAAK,eAA7B,WAEF,wBAAID,UAAU,YAEV,yBAAMA,UAAU,MAAMO,IAAI,yFAAyFC,IAAI,UAI3H,wBAAIR,UAAU,qBACZ,uBAAGA,UAAU,2BAA2BC,KAAK,gBAAgBC,GAAG,iBAAiBC,KAAK,SAASC,cAAY,WAAWC,gBAAc,OAAOC,gBAAc,SAAzJ,aAKF,wBAAIN,UAAU,YACZ,uBAAGA,UAAU,WAAWC,KAAK,eAA7B,gBCrBKQ,MAXf,WAEE,OAGI,kBAAC,EAAD,OCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.71202d1b.chunk.js","sourcesContent":["import React from 'react';\nimport './Navbar.css' \n\n\n\nfunction Navbar() {\n   \n    return (\n        \n   <header>\n <nav className=\"navbar navbar-expand-lg navbar-white static-top\">\n\n \n <ul className=\"navbar-nav ml-auto\">\n        <ol className=\"nav-item dropdown\">\n          <a className=\"nav-link dropdown-toggle\" href=\"acceuil.html\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n            Acceuil\n          </a>\n         \n        </ol>\n        <ol className=\"nav-item\">\n          <a className=\"nav-link\" href=\"equipe.html\">Equipe</a>\n        </ol>\n        <ol className=\"nav-item\">\n          \n            <img  className=\"im2\" src=\"https://www.farojob.net/wp-content/uploads/2019/12/Simplon-Tunisie-Polygone-scaled.png\" alt=\"logo\" >\n          \n        </img></ol>\n        \n        <ol className=\"nav-item dropdown\">\n          <a className=\"nav-link dropdown-toggle\" href=\"a propos.html\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n            A propos\n          </a>\n        \n        </ol>\n        <lo className=\"nav-item\">\n          <a className=\"nav-link\" href=\"contac.html\">Contact</a>\n        </lo>\n       \n      </ul>             \n          \n     \n    </nav>\n   </header>\n    );\n  }\nexport default Navbar;\n  ","import Navbar from './components/navbar/Navbar'\nimport React  from 'react';\n\n\nfunction App() {\n  \n  return (\n    \n\n      <Navbar />\n\n      \n  );\n}\n\nexport default App;\n\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport navbar from './components/navbar/Navbar'\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}